// Generated by CoffeeScript 1.6.2
var SIMLCompiler, fs, mkdirp, siml, sysPath, write;

fs = require('fs');

siml = require('siml');

sysPath = require('path');

mkdirp = require('mkdirp');

write = function(path, content) {
  var dir;

  if (content == null) {
    return;
  }
  dir = sysPath.dirname(path);
  return mkdirp(dir, '0775', function(err) {
    if (err != null) {
      throw err;
    }
    return fs.writeFile(path, content, function(err) {
      if (err != null) {
        throw err;
      }
    });
  });
};

module.exports = SIMLCompiler = (function() {
  SIMLCompiler.prototype.brunchPlugin = true;

  SIMLCompiler.prototype.type = 'template';

  SIMLCompiler.prototype.extension = 'siml';

  function SIMLCompiler(config) {
    var _ref, _ref1, _ref2, _ref3;

    this["public"] = config.paths["public"];
    this.junkFile = (Object.keys(config.files.templates.joinTo))[0];
    this.rootDir = config.files.templates.joinTo[this.junkFile];
    this.pretty = !!((_ref = config.plugins) != null ? (_ref1 = _ref.siml) != null ? _ref1.pretty : void 0 : void 0);
    this.generator = (_ref2 = config.plugins) != null ? (_ref3 = _ref2.siml) != null ? _ref3.generator : void 0 : void 0;
    if (this.generator !== 'html5' || this.generator !== 'angular') {
      this.generator = 'html5';
    }
  }

  SIMLCompiler.prototype.compile = function(data, path, callback) {
    var content, error, ex;

    try {
      return content = siml[this.generator].parse(data, {
        pretty: this.pretty
      });
    } catch (_error) {
      ex = _error;
      error = "Error: " + ex.message;
      if (ex.type) {
        error = ex.type + error;
      }
      if (ex.filename) {
        return error += " in '" + ex.filename + ":" + ex.line + ":" + ex.column + "'";
      }
    } finally {
      callback(error, '');
    }
  };

  SIMLCompiler.prototype.onCompile = function(compiled) {
    var template, templates, _i, _len;

    templates = this.getTemplates(compiled);
    for (_i = 0, _len = templates.length; _i < _len; _i++) {
      template = templates[_i];
      write(template.path, template.content);
    }
    return fs.unlink(sysPath.normalize("" + this["public"] + "/" + this.junkFile));
  };

  SIMLCompiler.prototype.getTemplates = function(compiled) {
    var paths, result,
      _this = this;

    paths = ((function() {
      var _i, _len, _results;

      _results = [];
      for (_i = 0, _len = compiled.length; _i < _len; _i++) {
        result = compiled[_i];
        if (result.path === sysPath.normalize("" + this["public"] + "/" + this.junkFile)) {
          _results.push(result.sourceFiles);
        }
      }
      return _results;
    }).call(this))[0];
    if (paths === void 0) {
      return [];
    }
    return paths.map(function(element, index) {
      var content, data, path, pathHunks;

      path = element.path.replace(_this.rootDir, '');
      pathHunks = path.split(sysPath.sep);
      pathHunks.push(pathHunks.pop().slice(0, -_this.extension.length) + 'html');
      pathHunks.splice(0, 1, _this["public"]);
      data = fs.readFileSync(element.path, 'utf8');
      content = siml[_this.generator].parse(data, {
        pretty: _this.pretty
      });
      return result = {
        path: sysPath.join.apply(_this, pathHunks),
        content: content
      };
    });
  };

  return SIMLCompiler;

})();
