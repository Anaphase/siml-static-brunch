// Generated by CoffeeScript 1.6.3
var SIMLStaticBrunch, fs, mkdirp, siml, sysPath, write;

fs = require('fs');

siml = require('siml');

sysPath = require('path');

mkdirp = require('mkdirp');

write = function(path, content) {
  var dir;
  if (content == null) {
    return;
  }
  dir = sysPath.dirname(path);
  return mkdirp(dir, '0775', function(err) {
    if (err != null) {
      throw err;
    }
    return fs.writeFile(path, content, function(err) {
      if (err != null) {
        throw err;
      }
    });
  });
};

module.exports = SIMLStaticBrunch = (function() {
  SIMLStaticBrunch.prototype.brunchPlugin = true;

  SIMLStaticBrunch.prototype.type = 'template';

  SIMLStaticBrunch.prototype.extension = 'siml';

  function SIMLStaticBrunch(config) {
    var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
    this["public"] = config.paths["public"];
    this.junkFile = (Object.keys(config.files.templates.joinTo))[0];
    this.rootDir = config.files.templates.joinTo[this.junkFile];
    this.pretty = ((_ref = config.plugins) != null ? (_ref1 = _ref.siml) != null ? _ref1.pretty : void 0 : void 0) == null ? true : (_ref2 = config.plugins) != null ? (_ref3 = _ref2.siml) != null ? _ref3.pretty : void 0 : void 0;
    this.generator = (_ref4 = config.plugins) != null ? (_ref5 = _ref4.siml) != null ? _ref5.generator : void 0 : void 0;
    if (!this.generator) {
      this.generator = 'html5';
    }
  }

  SIMLStaticBrunch.prototype.compile = function(data, path, callback) {
    var content, error, ex, file;
    try {
      content = siml[this.generator].parse(data, {
        pretty: this.pretty
      });
      file = this["public"] + path.replace(this.rootDir, '');
      file = file.slice(0, -this.extension.length) + 'html';
      return write(file, content);
    } catch (_error) {
      ex = _error;
      error = "Error: " + ex.message;
      if (ex.type) {
        error = ex.type + error;
      }
      if (ex.filename) {
        return error += " in '" + ex.filename + ":" + ex.line + ":" + ex.column + "'";
      }
    } finally {
      callback(error);
    }
  };

  SIMLStaticBrunch.prototype.onCompile = function(compiled) {
    return fs.unlink(sysPath.normalize(this["public"] + sysPath.sep + this.junkFile));
  };

  return SIMLStaticBrunch;

})();
